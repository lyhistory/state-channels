apply plugin: 'java'
apply plugin: "com.gorylenko.gradle-git-properties"
apply plugin: 'com.google.protobuf'

group 'papyrus-global'
version '0.1'

buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        jcenter()
    }
    dependencies {
        classpath "gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:1.4.17"
        // ASSUMES GRADLE 2.12 OR HIGHER. Use plugin version 0.7.5 with earlier
        // gradle versions
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.3'
        classpath 'com.bmuschko:gradle-docker-plugin:3.1.0'
        classpath  group: 'com.github.docker-java', name: 'docker-java', version: '3.0.13'
    }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots/"
    }
}


task v {
    ext.springBoot = "1.5.6.RELEASE"
    ext.spring = "4.3.10.RELEASE"
    ext.springSecurity = "4.2.3.RELEASE"
    ext.grpc = '1.5.0' 
}

dependencies {
    compile project(":smart-contracts")
//  Spring
    compile "org.springframework.boot:spring-boot-starter:${v.springBoot}"
    compile "org.springframework.boot:spring-boot-starter-security:${v.springBoot}"
    compile "org.springframework.boot:spring-boot-configuration-processor:${v.springBoot}"
    compile "org.springframework.boot:spring-boot-starter-logging:${v.springBoot}"

//Ethereum Web3
    compile ('org.web3j:core:2.3.0')


//GRPC
    compile "io.grpc:grpc-netty:${v.grpc}"
    compile "io.grpc:grpc-protobuf:${v.grpc}"
    compile "io.grpc:grpc-stub:${v.grpc}"
    compile "io.grpc:grpc-netty:${v.grpc}"
    compile "io.grpc:grpc-protobuf:${v.grpc}"
    compile "io.grpc:grpc-stub:${v.grpc}"
    compile 'io.netty:netty-tcnative-boringssl-static:2.0.6.Final'

//    Cassandra
    compile "com.datastax.cassandra:cassandra-driver-core:3.3.0"
    compile "com.datastax.cassandra:cassandra-driver-mapping:3.3.0"
    compile "com.datastax.cassandra:cassandra-driver-extras:3.3.0"

//    Libraries
    compile "com.fasterxml.jackson.core:jackson-annotations:2.9.0"
    compile "com.fasterxml.jackson.core:jackson-core:2.9.0"
    compile "com.fasterxml.jackson.core:jackson-databind:2.9.0"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.8.9"
    compile 'org.apache.commons:commons-lang3:3.5'
    compile 'org.apache.commons:commons-math3:3.6.1'

//    Developer tools

    compile "org.springframework.boot:spring-boot-devtools:${v.springBoot}"
    
//  Tests    
    testCompile "org.springframework.boot:spring-boot-starter-test:${v.springBoot}"
    testCompile 'junit:junit:4.12'
    testCompile 'org.openjdk.jmh:jmh-core-it:1.17'
    testCompile 'org.openjdk.jmh:jmh-generator-annprocess:1.17'


}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.3.0'
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${v.grpc}"
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {
                // To generate deprecated interfaces and static bindService method,
                // turn the enable_deprecated option to true below:
                option 'enable_deprecated=false'
            }
        }
    }
}

// Inform IntelliJ projects about the generated code.
apply plugin: 'idea'

idea {
    module {
        // Not using generatedSourceDirs because of
        // https://discuss.gradle.org/t/support-for-intellij-2016/15294/8
        sourceDirs += file("${projectDir}/build/generated/source/proto/main/java");
        sourceDirs += file("${projectDir}/build/generated/source/proto/main/grpc");
    }
}

task cleanProto(type:Delete) {
    delete 'build/generated/source/proto'  
}

apply plugin: 'com.bmuschko.docker-remote-api'

import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage

task dockerfile {
    dependsOn jar
    doLast {
        def dockerBase = 'build/docker/server'
        mkdir "$dockerBase"
        copy {
            into "$dockerBase"
            from('src/main/docker') {
                include '**/*'
            }
        }
        copy {
            into "$dockerBase/jars"
            from('build/libs') {
                include '*.jar'
            }
            rename { String fileName ->
                fileName.replace("-$version", '')
            }
        }
        //hack: prepend each dependency jar with its group name
        //it's required because some guys (from google) made jars with same name in different groups
        configurations.compile.files.each { file ->
            copy {
                into "$dockerBase/files/bin/libs"
                from file
                exclude '*papyrus*'
                rename { String name ->
                    "${file.parentFile.parentFile.parentFile.parentFile.name}.${name}"
                }
            }
            copy {
                into "$dockerBase/files/bin/libs"
                from file
                include '*papyrus*'
            }
        }
    }
}

def dockerTag = "eu.gcr.io/papyrus-global/channel-node"

task dockerImage(type: DockerBuildImage, dependsOn: dockerfile) {
    doFirst {
        println "Building image: ${dockerTag}"
    }
    inputDir = project.file('build/docker/server')
    //TAG does not work
    tag = dockerTag
}

test {
    // set a system property for the test JVM(s)
    systemProperty 'some.prop', 'value'

    // explicitly include or exclude tests
    exclude '**/integration/**'

    // show standard out and standard error of the test JVM(s) on the console
    testLogging.showStandardStreams = true

    // set heap size for the test JVM(s)
    minHeapSize = "128m"
    maxHeapSize = "512m"

    // set JVM arguments for the test JVM(s)
    //    jvmArgs '-XX:MaxPermSize=256m'

    // listen to events in the test execution lifecycle
    beforeTest { descriptor ->
        logger.lifecycle("Running test: " + descriptor)
    }

    // listen to standard out and standard error of the test JVM(s)
    onOutput { descriptor, event ->
        logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message)
    }
}

task runCassandra {
    doLast {
        mkdir "/tmp/channel-node-cassandra"
        exec {
            commandLine '/bin/bash', '-c', "docker run --rm --name channel-node-cassandra --rm -v /tmp/channel-node-cassandra:/cassandra_data -p 9042:9042 -e MAX_HEAP_SIZE=512m -e HEAP_NEWSIZE=64m -e CASSANDRA_SEEDS=localhost -e CASSANDRA_AUTO_BOOTSTRAP=true -e HOSTNAME=localhost eu.gcr.io/papyrus-global/cassandra:v11"
        }
    }
}
