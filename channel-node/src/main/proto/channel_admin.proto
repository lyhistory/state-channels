syntax = "proto3";

import "common.proto";

option java_multiple_files = true;
option java_package = "papyrus.channel.node";

// Main configuration interface
service ChannelAdmin {
    
    // Creates or updates outgoing channel with given participant
    rpc AddChannelPool(AddChannelPoolRequest) returns (AddChannelPoolResponse);
    
    // Creates or updates outgoing channel with given participant
    rpc GetChannelPools(GetChannelPoolsRequest) returns (GetChannelPoolsResponse);

    // Remove participant and asynchronously closes outgoing channels
    rpc RemoveChannelPool(RemoveChannelPoolRequest) returns (RemoveChannelPoolResponse);

    // Forces channel to close as soon as possible
    rpc RequestCloseChannel(CloseChannelRequest) returns (CloseChannelResponse);

    // Health check
    rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse);
}

message AddChannelPoolRequest {
    ChannelPoolMessage pool = 1;
}

message ChannelPoolMessage {
    string sender_address = 1;
    string receiver_address = 3;
    ChannelPropertiesMessage properties = 6;
    //number of simultaneously active open channels
    string deposit = 7;
    int32 min_active_channels = 8;
    int32 max_active_channels = 9;
    int32 close_blocks_count = 10;
}

message AddChannelPoolResponse {
    Error error = 1;
}

message GetChannelPoolsRequest {
    string sender_address = 1;
    //optional
    string receiver_address = 2;
}

message GetChannelPoolsResponse {
    repeated ChannelPoolMessage pool = 1;
}

message CloseChannelRequest {
    string channel_address = 1;
}

message CloseChannelResponse {
    Error error = 1;
}

message RemoveChannelPoolRequest {
    string sender_address = 1;
    string receiver_address = 2;
}

message RemoveChannelPoolResponse {
    Error error = 1;
}

message HealthCheckRequest {
    
}

message HealthCheckResponse {
    Error error = 1;
    string server_uid = 2;
}