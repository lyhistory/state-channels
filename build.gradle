apply plugin: 'java'
apply plugin: "com.gorylenko.gradle-git-properties"

group 'papyrus-global'
version '0.1'

buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        jcenter()
    }
    dependencies {
        classpath "gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:1.4.17"
    }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots/"
    }
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
        resources {
            srcDirs = ['src/main/resources']
        }
    }
    test {
        java {
            srcDirs = ['src/test/java']
        }
        resources {
            srcDirs = ['src/test/resources']
        }
    }
    bootstrap {
    }
}

task v {
    ext.springBoot = "1.5.6.RELEASE"
    ext.spring = "4.3.10.RELEASE"
    ext.springSecurity = "4.2.3.RELEASE"
    ext.jetty = "9.4.1.v20170120"
}

dependencies {
//  Spring
    compile "org.springframework.boot:spring-boot-starter:${v.springBoot}"
    compile "org.springframework.boot:spring-boot-starter-security:${v.springBoot}"
    compile "org.springframework.boot:spring-boot-configuration-processor:${v.springBoot}"
    compile "org.springframework.boot:spring-boot-starter-web:${v.springBoot}"
    compile "org.springframework.security:spring-security-config:${v.springSecurity}"
    compile "org.springframework.security:spring-security-web:${v.springSecurity}"

//Ethereum
    compile('org.web3j:core:2.3.0')

//Jetty
    compile "org.eclipse.jetty.http2:http2-server:${v.jetty}"
    compile "org.eclipse.jetty.http2:http2-http-client-transport:${v.jetty}"
    compile "org.eclipse.jetty.http2:http2-client:${v.jetty}"
    compile "org.eclipse.jetty.http2:http2-common:${v.jetty}"
    compile "org.eclipse.jetty.http2:http2-common:${v.jetty}"
    compile "org.eclipse.jetty.http2:http2-hpack:${v.jetty}"
    compile "org.eclipse.jetty.http2:http2-parent:${v.jetty}"
    compile "org.eclipse.jetty:jetty-alpn-server:${v.jetty}"
    compile "org.eclipse.jetty:jetty-alpn-client:${v.jetty}"
    compile "org.eclipse.jetty.alpn:alpn-api:1.1.3.v20160715"

    bootstrapRuntime group: 'org.mortbay.jetty.alpn', name: 'alpn-boot', version: '8.1.11.v20170118'

//    Libraries
    compile "com.fasterxml.jackson.core:jackson-annotations:2.9.0"
    compile "com.fasterxml.jackson.core:jackson-core:2.9.0"
    compile "com.fasterxml.jackson.core:jackson-databind:2.9.0"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.8.9"
    compile 'org.apache.commons:commons-lang3:3.5'
    compile 'org.apache.commons:commons-math3:3.6.1'

//    Developer tools

    compile "org.springframework.boot:spring-boot-devtools:${v.springBoot}"

//  Tests    
    testCompile "org.springframework.boot:spring-boot-starter-test:${v.springBoot}"
    testCompile 'junit:junit:4.12'
    testCompile 'org.openjdk.jmh:jmh-core-it:1.17'
    testCompile 'org.openjdk.jmh:jmh-generator-annprocess:1.17'


}

test {
    // set a system property for the test JVM(s)
    systemProperty 'some.prop', 'value'

    // explicitly include or exclude tests
    exclude '**/integration/**'

    // show standard out and standard error of the test JVM(s) on the console
    testLogging.showStandardStreams = true

    // set heap size for the test JVM(s)
    minHeapSize = "128m"
    maxHeapSize = "512m"

    // set JVM arguments for the test JVM(s)
    //    jvmArgs '-XX:MaxPermSize=256m'

    // listen to events in the test execution lifecycle
    beforeTest { descriptor ->
        logger.lifecycle("Running test: " + descriptor)
    }

    // listen to standard out and standard error of the test JVM(s)
    onOutput { descriptor, event ->
        logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message)
    }
}
